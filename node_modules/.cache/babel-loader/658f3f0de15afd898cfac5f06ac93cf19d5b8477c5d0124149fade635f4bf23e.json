{"ast":null,"code":"var _jsxFileName = \"/Users/gio/Desktop/Project-Clone/Movies-Frontend-React/src/movies/MovieForm.tsx\",\n  _s = $RefreshSig$();\nimport { Form, Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Button from \"../utils/Button\";\nimport { Link } from \"react-router-dom\";\nimport TextField from \"../forms/TextField\";\nimport ImageField from \"../forms/ImageField\";\nimport ChekboxField from \"../forms/CheckboxField\";\nimport DateField from \"../forms/DateField\";\nimport MultipleSelector from \"../forms/MultipleSelector\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MovieForm(props) {\n  _s();\n  const [selectedGenres, setSelectedGenres] = useState(mapToModel(props.selectedGenres));\n  const [nonSelectedGenres, setNonSelectedGenres] = useState(mapToModel(props.nonSelectedGenres));\n  const [selectedMovieTheaters, setSelectedMovieTheaters] = useState(mapToModel(props.selectedMovieTheaters));\n  const [nonSelectedMovieTheaters, setNonSelectedMovieTheaters] = useState(mapToModel(props.nonSelectedMovieTheaters));\n  function mapToModel(items) {\n    return items.map(item => {\n      return {\n        key: item.id,\n        value: item.name\n      };\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: props.model,\n    onSubmit: (values, actions) => {\n      values.genresIds = selectedGenres.map(item => item.key);\n      values.movieTheatersIds = selectedMovieTheaters.map(item => item.key);\n      props.onSubmit(values, actions);\n    },\n    validationSchema: Yup.object({\n      title: Yup.string().required(\"This field is required\").firstLetterUppercase()\n    }),\n    children: formikProps => /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        displayName: \"Title\",\n        field: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChekboxField, {\n        displayName: \"In Theaters\",\n        field: \"inTheaters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        displayName: \"Trailer\",\n        field: \"trailer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DateField, {\n        displayName: \"Release Date\",\n        field: \"releaseDate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ImageField, {\n        displayName: \"Poster\",\n        field: \"poster\",\n        imageURL: props.model.posterURL\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MultipleSelector, {\n        displayName: \"Genres\",\n        nonSelected: nonSelectedGenres,\n        selected: selectedGenres,\n        onChange: (selected, nonSelected) => {\n          setSelectedGenres(selected);\n          setNonSelectedGenres(nonSelected);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MultipleSelector, {\n        displayName: \"Movie Theaters\",\n        nonSelected: nonSelectedMovieTheaters,\n        selected: selectedMovieTheaters,\n        onChange: (selected, nonSelected) => {\n          setSelectedMovieTheaters(selected);\n          setNonSelectedMovieTheaters(nonSelected);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: formikProps.isSubmitting,\n        type: \"submit\",\n        children: \"Save Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        className: \"btn btn-secondary\",\n        to: \"/genres\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(MovieForm, \"fBU0qiUL4uzyr7AE9fPR7M1V2W4=\");\n_c = MovieForm;\nvar _c;\n$RefreshReg$(_c, \"MovieForm\");","map":{"version":3,"names":["Form","Formik","Yup","Button","Link","TextField","ImageField","ChekboxField","DateField","MultipleSelector","useState","jsxDEV","_jsxDEV","MovieForm","props","_s","selectedGenres","setSelectedGenres","mapToModel","nonSelectedGenres","setNonSelectedGenres","selectedMovieTheaters","setSelectedMovieTheaters","nonSelectedMovieTheaters","setNonSelectedMovieTheaters","items","map","item","key","id","value","name","initialValues","model","onSubmit","values","actions","genresIds","movieTheatersIds","validationSchema","object","title","string","required","firstLetterUppercase","children","formikProps","displayName","field","fileName","_jsxFileName","lineNumber","columnNumber","imageURL","posterURL","nonSelected","selected","onChange","disabled","isSubmitting","type","className","to","_c","$RefreshReg$"],"sources":["/Users/gio/Desktop/Project-Clone/Movies-Frontend-React/src/movies/MovieForm.tsx"],"sourcesContent":["import { Form, Formik, FormikHelpers } from \"formik\";\nimport { movieCreationDTO } from \"./movies.model\";\nimport * as Yup from \"yup\";\nimport Button from \"../utils/Button\";\nimport { Link } from \"react-router-dom\";\nimport TextField from \"../forms/TextField\";\nimport ImageField from \"../forms/ImageField\";\nimport ChekboxField from \"../forms/CheckboxField\";\nimport DateField from \"../forms/DateField\";\nimport MultipleSelector, {\n  multipleSelectorModel,\n} from \"../forms/MultipleSelector\";\nimport { useState } from \"react\";\nimport { genreDTO } from \"../genres/genres.mode\";\nimport { movieTheaterDTO } from \"../movietheaters/movieTheater.model\";\n\nexport default function MovieForm(props: movieFormProps) {\n  const [selectedGenres, setSelectedGenres] = useState(mapToModel(props.selectedGenres));\n  const [nonSelectedGenres, setNonSelectedGenres] = useState(mapToModel(props.nonSelectedGenres));\n\n  const [selectedMovieTheaters, setSelectedMovieTheaters] = useState(mapToModel(props.selectedMovieTheaters));\n  const [nonSelectedMovieTheaters, setNonSelectedMovieTheaters] = useState(mapToModel(props.nonSelectedMovieTheaters));\n\n  function mapToModel(\n    items: { id: number; name: string }[]\n  ): multipleSelectorModel[] {\n    return items.map((item) => {\n      return { key: item.id, value: item.name };\n    });\n  }\n\n  return (\n    <Formik\n      initialValues={props.model}\n      onSubmit={(values, actions) => {\n        values.genresIds = selectedGenres.map((item) => item.key);\n        values.movieTheatersIds = selectedMovieTheaters.map((item) => item.key);\n        props.onSubmit(values, actions);\n      }}\n      validationSchema={Yup.object({\n        title: Yup.string()\n          .required(\"This field is required\")\n          .firstLetterUppercase(),\n      })}\n    >\n      {(formikProps) => (\n        <Form>\n          <TextField displayName=\"Title\" field=\"title\" />\n          <ChekboxField displayName=\"In Theaters\" field=\"inTheaters\" />\n          <TextField displayName=\"Trailer\" field=\"trailer\" />\n          <DateField displayName=\"Release Date\" field=\"releaseDate\" />\n          <ImageField\n            displayName=\"Poster\"\n            field=\"poster\"\n            imageURL={props.model.posterURL}\n          />\n\n          <MultipleSelector\n            displayName=\"Genres\"\n            nonSelected={nonSelectedGenres}\n            selected={selectedGenres}\n            onChange={(selected, nonSelected) => {\n              setSelectedGenres(selected);\n              setNonSelectedGenres(nonSelected);\n            }}\n          />\n\n        <MultipleSelector\n            displayName=\"Movie Theaters\"\n            nonSelected={nonSelectedMovieTheaters}\n            selected={selectedMovieTheaters}\n            onChange={(selected, nonSelected) => {\n              setSelectedMovieTheaters(selected);\n              setNonSelectedMovieTheaters(nonSelected);\n            }}\n          />\n\n          <Button disabled={formikProps.isSubmitting} type=\"submit\">\n            Save Changes\n          </Button>\n          <Link className=\"btn btn-secondary\" to=\"/genres\">\n            Cancel\n          </Link>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\ninterface movieFormProps {\n  model: movieCreationDTO;\n  onSubmit(\n    values: movieCreationDTO,\n    actions: FormikHelpers<movieCreationDTO>\n  ): void;\n  selectedGenres: genreDTO[];\n  nonSelectedGenres: genreDTO[];\n  selectedMovieTheaters: movieTheaterDTO[];\n  nonSelectedMovieTheaters: movieTheaterDTO[];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}