{"ast":null,"code":"export function convertActorToFormData(actor) {\n  const formData = new FormData();\n  formData.append('name', actor.name);\n  if (actor.biography) {\n    formData.append('biography', actor.biography);\n  }\n  if (actor.dateOfBirth) {\n    formData.append('dateOfBirth', formatDate(actor.dateOfBirth));\n  }\n  if (actor.picture) {\n    formData.append('picture', actor.picture);\n  }\n  return formData;\n}\nexport function convertMovieToFormData(movie) {\n  const formData = new FormData();\n  formData.append('title', movie.title);\n  if (movie.summary) {\n    formData.append('summary', movie.summary);\n  }\n  formData.append('trailer', movie.trailer);\n  formData.append('inTheaters', String(movie.inTheaters));\n  if (movie.releaseDate) {\n    formData.append('releaseDate', formatDate(movie.releaseDate));\n  }\n  if (movie.poster) {\n    formData.append('poster', movie.poster);\n  }\n  formData.append('genresIds', JSON.stringify(movie.genresIds));\n  formData.append('movieTheatersIds', JSON.stringify(movie.movieTheatersIds));\n  formData.append('actors', JSON.stringify(movie.actors));\n  return formData;\n}\nfunction formatDate(date) {\n  date = new Date(date);\n  const format = new Intl.DateTimeFormat(\"en\", {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit'\n  });\n  const [{\n    value: month\n  },, {\n    value: day\n  },, {\n    value: year\n  }] = format.formatToParts(date);\n  return `${year}-${month}-${day}`;\n}","map":{"version":3,"names":["convertActorToFormData","actor","formData","FormData","append","name","biography","dateOfBirth","formatDate","picture","convertMovieToFormData","movie","title","summary","trailer","String","inTheaters","releaseDate","poster","JSON","stringify","genresIds","movieTheatersIds","actors","date","Date","format","Intl","DateTimeFormat","year","month","day","value","formatToParts"],"sources":["/Users/gio/Desktop/Project-Clone/Movies-Frontend-React/src/utils/formDataUtils.ts"],"sourcesContent":["import {actorCreationDTO} from '../actors/actors.mode'\nimport { movieCreationDTO } from '../movies/movies.model';\n\nexport function convertActorToFormData(actor: actorCreationDTO): FormData{\n    const formData = new FormData();\n\n    formData.append('name', actor.name);\n\n    if (actor.biography){\n        formData.append('biography', actor.biography);\n    }\n\n    if (actor.dateOfBirth){\n        formData.append('dateOfBirth', formatDate(actor.dateOfBirth))\n    }\n\n    if (actor.picture){\n        formData.append('picture', actor.picture);\n    }\n\n    return formData;\n}\n\nexport function convertMovieToFormData(movie: movieCreationDTO){\n    const formData = new FormData();\n\n    formData.append('title', movie.title);\n\n    if (movie.summary){\n        formData.append('summary', movie.summary);\n    }\n\n    formData.append('trailer', movie.trailer);\n    formData.append('inTheaters', String(movie.inTheaters));\n\n    if (movie.releaseDate){\n        formData.append('releaseDate', formatDate(movie.releaseDate));\n    }\n\n    if (movie.poster){\n        formData.append('poster', movie.poster);\n    }\n\n    formData.append('genresIds', JSON.stringify(movie.genresIds));\n    formData.append('movieTheatersIds', JSON.stringify(movie.movieTheatersIds));\n    formData.append('actors', JSON.stringify(movie.actors));\n\n    return formData;\n}\n\nfunction formatDate(date: Date){\n    date = new Date(date);\n    const format = new Intl.DateTimeFormat(\"en\", {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit'\n    });\n\n    const [\n        {value: month},,\n        {value: day},,\n        {value: year}\n    ] = format.formatToParts(date);\n\n    return `${year}-${month}-${day}`;\n}"],"mappings":"AAGA,OAAO,SAASA,sBAAsBA,CAACC,KAAuB,EAAW;EACrE,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAE/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,KAAK,CAACI,IAAI,CAAC;EAEnC,IAAIJ,KAAK,CAACK,SAAS,EAAC;IAChBJ,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEH,KAAK,CAACK,SAAS,CAAC;EACjD;EAEA,IAAIL,KAAK,CAACM,WAAW,EAAC;IAClBL,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEI,UAAU,CAACP,KAAK,CAACM,WAAW,CAAC,CAAC;EACjE;EAEA,IAAIN,KAAK,CAACQ,OAAO,EAAC;IACdP,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEH,KAAK,CAACQ,OAAO,CAAC;EAC7C;EAEA,OAAOP,QAAQ;AACnB;AAEA,OAAO,SAASQ,sBAAsBA,CAACC,KAAuB,EAAC;EAC3D,MAAMT,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAE/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEO,KAAK,CAACC,KAAK,CAAC;EAErC,IAAID,KAAK,CAACE,OAAO,EAAC;IACdX,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEO,KAAK,CAACE,OAAO,CAAC;EAC7C;EAEAX,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEO,KAAK,CAACG,OAAO,CAAC;EACzCZ,QAAQ,CAACE,MAAM,CAAC,YAAY,EAAEW,MAAM,CAACJ,KAAK,CAACK,UAAU,CAAC,CAAC;EAEvD,IAAIL,KAAK,CAACM,WAAW,EAAC;IAClBf,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEI,UAAU,CAACG,KAAK,CAACM,WAAW,CAAC,CAAC;EACjE;EAEA,IAAIN,KAAK,CAACO,MAAM,EAAC;IACbhB,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEO,KAAK,CAACO,MAAM,CAAC;EAC3C;EAEAhB,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEe,IAAI,CAACC,SAAS,CAACT,KAAK,CAACU,SAAS,CAAC,CAAC;EAC7DnB,QAAQ,CAACE,MAAM,CAAC,kBAAkB,EAAEe,IAAI,CAACC,SAAS,CAACT,KAAK,CAACW,gBAAgB,CAAC,CAAC;EAC3EpB,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEe,IAAI,CAACC,SAAS,CAACT,KAAK,CAACY,MAAM,CAAC,CAAC;EAEvD,OAAOrB,QAAQ;AACnB;AAEA,SAASM,UAAUA,CAACgB,IAAU,EAAC;EAC3BA,IAAI,GAAG,IAAIC,IAAI,CAACD,IAAI,CAAC;EACrB,MAAME,MAAM,GAAG,IAAIC,IAAI,CAACC,cAAc,CAAC,IAAI,EAAE;IACzCC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,SAAS;IAChBC,GAAG,EAAE;EACT,CAAC,CAAC;EAEF,MAAM,CACF;IAACC,KAAK,EAAEF;EAAK,CAAC,GACd;IAACE,KAAK,EAAED;EAAG,CAAC,GACZ;IAACC,KAAK,EAAEH;EAAI,CAAC,CAChB,GAAGH,MAAM,CAACO,aAAa,CAACT,IAAI,CAAC;EAE9B,OAAQ,GAAEK,IAAK,IAAGC,KAAM,IAAGC,GAAI,EAAC;AACpC"},"metadata":{},"sourceType":"module","externalDependencies":[]}