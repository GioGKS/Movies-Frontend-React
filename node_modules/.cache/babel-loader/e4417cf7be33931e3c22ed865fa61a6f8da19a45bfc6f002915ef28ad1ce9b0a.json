{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Authorized(props) {\n  _s();\n  const [isAuthorized, setIsAuthorized] = useState(true);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isAuthorized ? props.authorized : props.notAuthorized\n  }, void 0, false);\n}\n_s(Authorized, \"lQWq/83kfgyGpRZtQ4LiStIdpNo=\");\n_c = Authorized;\nvar _c;\n$RefreshReg$(_c, \"Authorized\");","map":{"version":3,"names":["useState","Fragment","_Fragment","jsxDEV","_jsxDEV","Authorized","props","_s","isAuthorized","setIsAuthorized","children","authorized","notAuthorized","_c","$RefreshReg$"],"sources":["/Users/gio/Desktop/Project-Clone/Movies-Frontend-React/src/auth/Authorized.tsx"],"sourcesContent":["import { ReactElement, useState } from \"react\"\n\nexport default function Authorized(props: authorizedProps){\n    const [isAuthorized, setIsAuthorized] = useState(true);\n    return (\n        <>\n            {isAuthorized ? props.authorized : props.notAuthorized}\n        </>\n    )\n}\n\ninterface authorizedProps{\n    authorized: ReactElement;\n    notAuthorized?: ReactElement;\n    role?: string;\n}"],"mappings":";AAAA,SAAuBA,QAAQ,QAAQ,OAAO;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9C,eAAe,SAASC,UAAUA,CAACC,KAAsB,EAAC;EAAAC,EAAA;EACtD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtD,oBACII,OAAA,CAAAF,SAAA;IAAAQ,QAAA,EACKF,YAAY,GAAGF,KAAK,CAACK,UAAU,GAAGL,KAAK,CAACM;EAAa,gBACxD,CAAC;AAEX;AAACL,EAAA,CAPuBF,UAAU;AAAAQ,EAAA,GAAVR,UAAU;AAAA,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}