{"ast":null,"code":"var _jsxFileName = \"/Users/gio/Desktop/Project-Clone/Movies-Frontend-React/src/movies/CreateMovie.tsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { urlMovies } from \"../endpoints\";\nimport DisplayErrors from \"../utils/DisplayErrors\";\nimport { convertMovieToFormData } from \"../utils/formDataUtils\";\nimport Loading from \"../utils/Loading\";\nimport MovieForm from \"./MovieForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CreateMovie() {\n  _s();\n  const [nonSelectedGenres, setNonSelectedGenres] = useState([]);\n  const [nonSelectedMovieTheaters, setNonSelectedMovieTheaters] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [errors, setErrors] = useState([]);\n  const history = useNavigate();\n  useEffect(() => {\n    axios.get(`${urlMovies}/postget`).then(response => {\n      setNonSelectedGenres(response.data.genres);\n      setNonSelectedMovieTheaters(response.data.movieTheaters);\n      setLoading(false);\n    });\n  }, []);\n  async function create(movie) {\n    try {\n      const formData = convertMovieToFormData(movie);\n      const response = await axios({\n        method: \"post\",\n        url: urlMovies,\n        data: formData,\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      history(`/movie/${response.data}`);\n    } catch (error) {\n      setErrors(error.response.data);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Create Movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DisplayErrors, {\n      errors: errors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(MovieForm, {\n      model: {\n        title: \"\",\n        inTheaters: false,\n        trailer: \"\"\n      },\n      onSubmit: async values => await create(values),\n      nonSelectedGenres: nonSelectedGenres,\n      selectedGenres: [],\n      nonSelectedMovieTheaters: nonSelectedMovieTheaters,\n      selectedMovieTheaters: [],\n      selectedActors: []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(CreateMovie, \"C2Yn7Seq7dOpRAkGF80RNh+w1O0=\", false, function () {\n  return [useNavigate];\n});\n_c = CreateMovie;\nvar _c;\n$RefreshReg$(_c, \"CreateMovie\");","map":{"version":3,"names":["axios","useEffect","useState","useNavigate","urlMovies","DisplayErrors","convertMovieToFormData","Loading","MovieForm","jsxDEV","_jsxDEV","Fragment","_Fragment","CreateMovie","_s","nonSelectedGenres","setNonSelectedGenres","nonSelectedMovieTheaters","setNonSelectedMovieTheaters","loading","setLoading","errors","setErrors","history","get","then","response","data","genres","movieTheaters","create","movie","formData","method","url","headers","error","children","fileName","_jsxFileName","lineNumber","columnNumber","model","title","inTheaters","trailer","onSubmit","values","selectedGenres","selectedMovieTheaters","selectedActors","_c","$RefreshReg$"],"sources":["/Users/gio/Desktop/Project-Clone/Movies-Frontend-React/src/movies/CreateMovie.tsx"],"sourcesContent":["import axios, { AxiosResponse } from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { urlMovies } from \"../endpoints\";\nimport { genreDTO } from \"../genres/genres.mode\";\nimport { movieTheaterDTO } from \"../movietheaters/movieTheater.model\";\nimport DisplayErrors from \"../utils/DisplayErrors\";\nimport { convertMovieToFormData } from \"../utils/formDataUtils\";\nimport Loading from \"../utils/Loading\";\nimport MovieForm from \"./MovieForm\";\nimport { movieCreationDTO, moviesPostGetDTO } from \"./movies.model\";\n\nexport default function CreateMovie() {\n  const [nonSelectedGenres, setNonSelectedGenres] = useState<genreDTO[]>([]);\n  const [nonSelectedMovieTheaters, setNonSelectedMovieTheaters] = useState<\n    movieTheaterDTO[]\n  >([]);\n  const [loading, setLoading] = useState(true);\n  const [errors, setErrors] = useState<string[]>([]);\n  const history = useNavigate();\n\n  useEffect(() => {\n    axios\n      .get(`${urlMovies}/postget`)\n      .then((response: AxiosResponse<moviesPostGetDTO>) => {\n        setNonSelectedGenres(response.data.genres);\n        setNonSelectedMovieTheaters(response.data.movieTheaters);\n        setLoading(false);\n      });\n  }, []);\n\n  async function create(movie: movieCreationDTO) {\n    try {\n      const formData = convertMovieToFormData(movie);\n      const response = await axios({\n        method: \"post\",\n        url: urlMovies,\n        data: formData,\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n      });\n\n      history(`/movie/${response.data}`);\n    } catch (error: any) {\n      setErrors(error.response.data);\n    }\n  }\n\n  return (\n    <>\n      <h3>Create Movie</h3>\n      <DisplayErrors errors={errors} />\n      {loading ? (\n        <Loading />\n      ) : (\n        <MovieForm\n          model={{ title: \"\", inTheaters: false, trailer: \"\" }}\n          onSubmit={async (values) => await create(values)}\n          nonSelectedGenres={nonSelectedGenres}\n          selectedGenres={[]}\n          nonSelectedMovieTheaters={nonSelectedMovieTheaters}\n          selectedMovieTheaters={[]}\n          selectedActors={[]}\n        />\n      )}\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}