{"ast":null,"code":"var _jsxFileName = \"/Users/gio/Desktop/Project-Clone/Movies-Frontend-React/src/movies/MovieForm.tsx\",\n  _s = $RefreshSig$();\nimport { Form, Formik } from \"formik\";\nimport * as Yup from 'yup';\nimport Button from \"../utils/Button\";\nimport { Link } from \"react-router-dom\";\nimport TextField from \"../forms/TextField\";\nimport ImageField from \"../forms/ImageField\";\nimport ChekboxField from \"../forms/CheckboxField\";\nimport DateField from \"../forms/DateField\";\nimport MultipleSelector from \"../forms/MultipleSelector\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MovieForm(props) {\n  _s();\n  const [selectedGenres, setSelectedgenres] = useState(mapToModel(props.selectedGenres));\n  const [nonSelectedGenres, setNonSelectedgenres] = useState(mapToModel(props.nonSelectedGenres));\n  function mapToModel(items) {\n    return items.map(item => {\n      return {\n        key: item.id,\n        value: item.name\n      };\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: props.model,\n    onSubmit: props.onSubmit,\n    validationSchema: Yup.object({\n      title: Yup.string().required('This field is required').firstLetterUppercase()\n    }),\n    children: formikProps => /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        displayName: \"Title\",\n        field: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ChekboxField, {\n        displayName: \"In Theaters\",\n        field: \"inTheaters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        displayName: \"Trailer\",\n        field: \"trailer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(DateField, {\n        displayName: \"Release Date\",\n        field: \"releaseDate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ImageField, {\n        displayName: \"Poster\",\n        field: \"poster\",\n        imageURL: props.model.posterURL\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(MultipleSelector, {\n        displayName: \"Genres\",\n        nonSelected: nonSelectedGenres,\n        selected: selectedGenres,\n        onChange: (selected, nonSelected) => {\n          setSelectedgenres(selected);\n          setNonSelectedgenres(nonSelected);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: formikProps.isSubmitting,\n        type: \"submit\",\n        children: \"Save Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        className: \"btn btn-secondary\",\n        to: \"/genres\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n}\n_s(MovieForm, \"4bZiNLycuDtbEf/oALIcZw5Wh4Q=\");\n_c = MovieForm;\nvar _c;\n$RefreshReg$(_c, \"MovieForm\");","map":{"version":3,"names":["Form","Formik","Yup","Button","Link","TextField","ImageField","ChekboxField","DateField","MultipleSelector","useState","jsxDEV","_jsxDEV","MovieForm","props","_s","selectedGenres","setSelectedgenres","mapToModel","nonSelectedGenres","setNonSelectedgenres","items","map","item","key","id","value","name","initialValues","model","onSubmit","validationSchema","object","title","string","required","firstLetterUppercase","children","formikProps","displayName","field","fileName","_jsxFileName","lineNumber","columnNumber","imageURL","posterURL","nonSelected","selected","onChange","disabled","isSubmitting","type","className","to","_c","$RefreshReg$"],"sources":["/Users/gio/Desktop/Project-Clone/Movies-Frontend-React/src/movies/MovieForm.tsx"],"sourcesContent":["import { Form, Formik, FormikHelpers } from \"formik\";\nimport { movieCreationDTO } from \"./movies.model\";\nimport * as Yup from 'yup'\nimport Button from \"../utils/Button\";\nimport { Link } from \"react-router-dom\";\nimport TextField from \"../forms/TextField\";\nimport ImageField from \"../forms/ImageField\";\nimport ChekboxField from \"../forms/CheckboxField\";\nimport DateField from \"../forms/DateField\";\nimport MultipleSelector, { multipleSelectorModel } from \"../forms/MultipleSelector\";\nimport { useState } from \"react\";\nimport { genreDTO } from \"../genres/genres.mode\";\n\nexport default function MovieForm(props: movieFormProps){\n\n    const [selectedGenres, setSelectedgenres] = useState(mapToModel(props.selectedGenres));\n    const [nonSelectedGenres, setNonSelectedgenres] = useState(mapToModel(props.nonSelectedGenres));\n\n    function mapToModel(items: {id: number, name:string}[]): multipleSelectorModel[]{\n        return items.map(item => {\n            return {key: item.id, value: item.name}\n        })\n    }\n\n    return(\n        <Formik\n            initialValues={props.model}\n            onSubmit={props.onSubmit}\n            validationSchema={Yup.object({\n                title: Yup.string().required('This field is required').firstLetterUppercase()\n            })}\n        >\n            {(formikProps) => (\n                <Form>\n\n                    <TextField displayName=\"Title\" field=\"title\"/>\n                    <ChekboxField displayName=\"In Theaters\" field=\"inTheaters\"/>\n                    <TextField displayName=\"Trailer\" field=\"trailer\"/>\n                    <DateField displayName=\"Release Date\" field=\"releaseDate\"/>\n                    <ImageField displayName=\"Poster\" field=\"poster\" imageURL={props.model.posterURL}/>\n\n                    <MultipleSelector \n                        displayName=\"Genres\"\n                        nonSelected={nonSelectedGenres}\n                        selected={selectedGenres}\n                        onChange={(selected, nonSelected) => {\n                            setSelectedgenres(selected);\n                            setNonSelectedgenres(nonSelected)\n                        }}\n                    />\n\n                    <Button disabled={formikProps.isSubmitting} type='submit'>Save Changes</Button>\n                     <Link className=\"btn btn-secondary\" to=\"/genres\">Cancel</Link>\n                </Form>\n            )}\n        </Formik>\n    )\n}\n\ninterface movieFormProps{\n    model: movieCreationDTO;\n    onSubmit(values: movieCreationDTO, actions: FormikHelpers<movieCreationDTO>): void;\n    selectedGenres: genreDTO[];\n    nonSelectedGenres: genreDTO[];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}